React Native

What is it?
	- React is platform agnostic.  
	- React is a javascript library used for building user interfaces
	- When we use React for web development, we use ReactDOM.  React DOM knows how to take your React stuff and render it to the browser
	- React Native is like ReactDOM except it is for native mobile apps
	- React Native provides a collection of special components that are used for mobile development
	- Once compiled, it will be come a real native mobile app that you can deploy to Androis and iOS
	- Views are compiled into real native elements
	- Your business logic will not be compiled
	- The React Native components will be compiled into native elements
	- The business logic, http requests, etc are run on a separate thread within your app that is running a Javascript virtual machine

How do we get started?
	- Expo CLI = third party service which is completely free
	- It gives you a managed app development workflow
	- The downside is that you are locked into the expo workflow and all of the limitations that come with expo
	- It will extract away some of the complexities of building a native app which can help make development easier

	- React Native CLI = managed by the react native team and community
	- Bare bones development
	- It can be more cumbersome because there are almost no convenience or utility features
	- Full flexibility which will allow you to write native code for app development (android or iOS)
	- If you're using native features, you may have to import features and packages to make things work.

	- If you're justing getting started, the expo CLI will probably be your best bet because you don't need to know so much about native things.
	- You can install the expo client on your device which will allow you to test your app and see how it will work on a native device.
	- You can publish your app to the expo client so other people that have the expo client can use your app
	- Using expo, you can publish your app to the app store or play store so that people don't have to have the expo client to use your app

Getting started with Expo
	- Go to https://expo.io and click getting started
	- You need node.js as a dependency
	- You can install the expo cli by running npm install expo-cli --global
	- This will install the expo-cli globally on your machine so you can create apps easily.
	- Once installed, you can create a new expo-cli app by running expo init my-project-name
	- When prompted for a template, do not choose bare minimum as that will not install the convenience things from expo-cli

	- Once you have an app and have run npm start, you can open it using expo on your native device (an app you get from app/play store) and can scan the QR code that is in the terminal.
	- Expo will  then compile / bundle your javascript and display your app on your native device.

	- The .expo folder contains expo configuration options
	- The assets contains images like your splash screen
	- If you look at the App.js file, you will see that it looks just like any other React app.  We still use JSX and components to build our app.
	- The View and Text components will be compiled into native widgets
	- The StyleSheet class is a utility provided by React Native that allows you to style your app.

React native apps are hard work.  It's not about writing JS code once and having it run everwhere.  You will have to learn what certain code will look like on each platform and then style each of your components around that.

React Native is more about the "Learn once, write everywhere" philosophy.  You will have to learn what looks good on each platform and build around that.  This means you will have a lot of if statements written around each specific platform.

This applies tremendously to styling.  There is little or no cross platform styling.

There are very few pre-built components that will compile down to native code, but they are pretty much everything you need.

You will have to write a lot of code to do responsive design.  There are little to no tools out there that will do responsive design and adjust element height / width for you.  You will have to write a lot of code to check the device size and then adjust your components based on that.

React Native is also a "fast-moving target".  There are new versions almost every month.  As a result, breaking changes do happen.

With React Native, you will have a high dependency on third party packages that also change.  Because we are using expo, you won't run into this as much because it handles a lot of this for us.  If you are using a bare bones setup, though, you will have to utilize a lot of these third party packages to do things like accessing the camera or bluetooth.  Because we utilize expo, we don't have to worry about that.

There are some bugs in React Native.  Sometimes, things just won't as you would expect.  You may have to get creative to get around some of these.  As a result, you will want to make sure you stay up to date on the RN releases to get bug fixes and enhancements.  This does not mean that everything will work flawlessly and you will have to be willing to go to Google for answers to things and use workarounds.

So, should I still learn React Native?

	- You could still go the absolute native route and write apps in Java / Android for Androide devices and Swift / Objective C for iOS devices.
	- The downside is you will have to learn each of these languages and will have to basically write 2 apps.  You lose the ability to share logic and things between the two apps when you do this.
	- That may not be bad, but it does slow down your time to release each app as you have to maintain each one separately.

	- You can also build a Progressive Web App (PWA).
	- This is nice as it allows you to still maintain 1 code base, but it relies on your users being on a device and browser that support these features
	- Not available in all browsers on all devices.
	- Not able to be distributed through the app/play stores

	- Use Ionic or a similar solution
	- This allows you to build a web app using modern web technologies
	- Ionic wraps your web app in some code that allows it to function as a real native app
	- This does have slightly worse performance as you are basically running everything through a Web View
	- It's just a wrapper around a web app
	- The benefit of using RN is that it will compile it down to a native app

	- You can use Fluttr or Native Script
	- These are very similar to RN where you get a compiled app
	- They are just different languages than RN, so you would have to learn those
	- These are also a good alternative

What are the requirements to build a RN app?
	- Windows => iOS or Linux, you cannot build an app for iOS or Linux on a Windows machine
	- This is a restriction put in by Apple and Linux
	- You can get around this by using Expo as the app is then built on their servers and deployed for you

	- Windows => Android, full local support

	- MacOS => iOS and Androis full local support

How do I test on a device?
	- You can download the expo app on your local device which is great, but it limits you only to what you own

	- You can use a simulator on your development machine
	- Great alternative as you no longer have to own a bunch of different devices
	- Allows you to test on a specific version of a device (older iPhone or Android device)
	- Go to docs.expo.io
	- Under the managed workflow, you can learn how to install an Android and iOS simulator

Remember, this is not a web app
	- You won't have access to the same types of styles as you do in the web
	- There is no CSS
	- A lot of the styling is influenced by CSS
	- There are inline styles and stylesheet objects, but no CSS
	- Only a subset of the CSS styles implemented (influenced by CSS)
	- Stylesheet objects are easier to work with than inline styles

A <View> component is like a div in web meant to wrap your content
A <Text> component is like a p in web meant to display text
You cannot display text without wrapping it in a <Text> component
An <Image> component is like an img in web meant to display an image
One of the main jobs of the <View> is to receive styles
You can nest views within each other

Styling
	- Again, this is not CSS but is influenced by CSS
	- You can see all of the styles on the React Native page
	- Most components support styles
	- Most colors are supported by RN and you can see a comprehensive list on their site
	- React Native uses flexbox styling out of the box
	- The flexbox styling is pretty much the same as web flexbox except with a few differences in the defaults